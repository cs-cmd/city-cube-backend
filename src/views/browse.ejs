<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Browse Collections</title>
    <link rel="stylesheet" href="/styles/index.css" type="text/css"/>
</head>
<body>
    <header class='centered vertical'>
        <h1 class=>Browse CityCube collections</h1>
        <a class='page-button regular' href='/'>Return</a>
    </header>

    <main>
        <h1 class='centered-text'>Please select browse type</h1>
        <div class='browse-types'>
            <input class='page-button regular' type='button' value='Menu Items'>
            <input class='page-button regular' type='button' value='Users'>
            <input class='page-button regular' type='button' value='All flavors'>
        </div>

        <table class='query-results'>

        </table>

        <div class='images'>
        </div>
    </main>

    <script>
        const menuItemsButton = document.querySelector('input[value="Menu Items"]');
        const usersButton = document.querySelector('input[value="Users"]');
        const flavorsButton = document.querySelector('input[value="All flavors"]');
        const resultsTable = document.querySelector('.query-results');
        const images = document.querySelector('.images');

        function loadTable(items) {
            if(resultsTable.children.length > 0) {
                const tableChildren = resultsTable.childNodes;
                for(let i = tableChildren.length - 1; i >= 0; i--) {
                    resultsTable.removeChild(tableChildren.item(i));
                }
            }

            for(let i = 0; i < items.length; i++) {
                const tableRow = document.createElement('tr');

                const item = items[i];
                const keys = Object.keys(item);
                for(let k = 0; k < keys.length; k++) {
                    const tableData = document.createElement('td');

                    let key = keys[k];
                    tableData.innerText = `${key}: ${item[key]}`;
                    tableRow.appendChild(tableData); 
                }

                resultsTable.appendChild(tableRow);
            }            
        }

        function loadImages(imageArray) {
            if(images.children.length > 0) {
                const imageChildren = images.childNodes;
                for(let i = imageChildren.length - 1; i >= 0; i--) {
                    imageTable.removeChild(imageChildren.item(i));
                }
            }

            for(let i = 0; i < imageArray.length; i++) {
                const image = document.createElement('img');
                image.src = imageArray[i];
                images.appendChild(image);
            }
        }

        async function queryMenuItems() {
            return await fetch('/api/menu-search')
            .then((res) => res.json())
            .then((json) => json)
            .catch(err => {
                console.log(err);
            });
        }

        menuItemsButton.addEventListener('click', async () => {
            const results = await queryMenuItems();
            const images = results.map((item) => {
                if (item['images'] !== undefined) {
                    return item['images'];
                }
            });
            loadTable(results);
            loadImages(images);
        });

        usersButton.addEventListener('click', () => {

        });
    </script>
</body>
</html>